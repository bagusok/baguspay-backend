// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id       String @id @unique @default(uuid())
  username String @unique
  email    String @unique
  password String
  phone    String @unique
  longName String @map("long_name")

  tokens String? @unique
  role   Role    @default(USER)

  isBanned     Boolean @default(false) @map("is_banned")
  isVerifEmail Boolean @default(false) @map("is_verif_email")
  isVerifPhone Boolean @default(false) @map("is_verif_phone")

  otpCode String? @map("otp_code")
  pinCode String? @map("pin_code")

  balance Int @default(0)
  point   Int @default(0)

  verifiedAt   DateTime?
  createdAt    DateTime       @default(now())
  Transactions Transactions[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
  RESELLER

  @@map("role")
}

model Services {
  id        String      @id @unique @default(uuid())
  name      String      @unique
  slug      String      @unique
  desc      String?
  imgLogo   String?     @map("img_logo")
  imgBanner String?     @map("img_banner")
  type      ServiceType @default(LAINNYA) @map("service_type")

  isAvailable Boolean @default(true) @map("is_available")

  inputFieldDescription String? @map("input_field_description")
  inputFieldHintImage   String? @map("input_field_hint_image")

  isInputFieldOne     Boolean        @default(false) @map("is_input_field_one")
  inputFieldOneType   InputFieldType @default(TEXT) @map("input_field_one_type")
  inputFieldOneOption Json?          @map("input_field_one_option")

  isInputFieldTwo     Boolean        @default(false) @map("is_input_field_two")
  inputFieldTwoType   InputFieldType @default(TEXT) @map("input_field_two_type")
  inputFieldTwoOption Json?          @map("input_field_two_option")

  isInputFieldThree     Boolean        @default(false) @map("is_input_field_three")
  inputFieldThreeType   InputFieldType @default(TEXT) @map("input_field_three_type")
  inputFieldThreeOption Json?          @map("input_field_three_option")

  region          Region         @default(GLOBAL)
  productCategory ProductGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

enum ServiceType {
  GAME_DIRECT
  GAME_VOUCHER
  TAGIHAN
  PULSA
  PAKET_DATA
  E_MONEY
  AKUN_PREMIUM
  SMM
  LAINNYA

  @@map("service_type")
}

enum InputFieldType {
  TEXT
  NUMBER
  SELECT

  @@map("input_field_type")
}

model ProductGroup {
  id      String  @id @unique @default(uuid())
  name    String
  desc    String?
  imgLogo String? @map("img_logo")

  region Region @default(GLOBAL)

  products   Products[]
  Services   Services?  @relation(fields: [servicesId], references: [id])
  servicesId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_group")
}

model Products {
  id             String              @id @unique @default(uuid())
  name           String
  desc           String?
  imgLogo        String?             @map("img_logo")
  profit         Int                 @default(0)
  price          Int
  stock          Int                 @default(100)
  resellerPrice  Int                 @map("reseller_price")
  profitReseller Int                 @default(0) @map("profit_reseller")
  type           ServiceType         @default(LAINNYA) @map("type")
  typeResponse   ProductResponseType @default(DIRECT) @map("type_response")

  isAvailable Boolean @default(true)

  h2hProvider       ProviderH2H? @map("h2h_provider")
  idProductProvider String       @map("id_product_provider")
  priceFromProvider Int          @map("price_from_provider")

  ProductCategory   ProductGroup? @relation(fields: [productCategoryId], references: [id])
  productCategoryId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

enum ProductResponseType {
  DIRECT
  DiRECT_RETURN
  MANUAL
}

enum Region {
  INDONESIA
  MALAYSIA
  SINGAPORE
  GLOBAL

  @@map("region")
}

enum ProviderH2H {
  DIGIFLAZZ
  VIPRESELLER
  VOCAGAMES
  APIGAMES

  @@map("provider_h2h")
}

model PaymentMethod {
  id         String                @id @unique @default(cuid())
  providerId String                @map("provider_id")
  provider   PaymentMethodProvider @map("provider")
  type       PaymentMethodType     @map("type")

  name String  @unique
  desc String?

  fees          Int    @default(0)
  feesInPercent String @default("0") @map("fees_in_percent")

  isAvailable Boolean @default(true) @map("is_available")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Transactions Transactions[]

  @@map("payment_method")
}

enum PaymentMethodType {
  TRANSFER_BANK
  TRANSFER_EWALLET
  DIRECT_EWALLET
  VIRTUAL_ACCOUNT
  RETAIL_OUTLET
  CREDIT_CARD
  LINK_PAYMENT
  QR_CODE
  OTHER

  @@map("payment_method_type")
}

enum PaymentMethodProvider {
  PAYDISINI
  DUITKU
}

model Transactions {
  id       String  @id @unique @default(uuid())
  orderRef String? @unique @map("order_ref")

  productId      String @map("product_id")
  productName    String @map("product_name")
  productService String @map("product_service")
  productPrice   Int    @map("product_price")
  productQty     Int    @default(1) @map("product_qty")
  price          Int    @map("price")
  fees           Int    @default(0)
  totalPrice     Int    @map("total_price")

  paymentRef        String? @map("payment_ref")
  idPaymentProvider String? @map("id_payment_provider")
  paymentNumber     String? @map("payment_number")
  paymentName       String? @map("payment_name")
  isLinkPayment     Boolean @default(false) @map("is_link_payment")
  linkPayment       String? @map("link_payment")

  isQrcode Boolean @default(false) @map("is_qrcode")
  qrData   String? @map("qr_data")

  paidStatus  PaidStatus  @default(PENDING) @map("paid_status")
  orderStatus OrderStatus @default(PENDING) @map("order_status")

  isRefunded   Boolean      @default(false) @map("is_refund")
  refundStatus RefundStatus @default(NONE) @map("refund_status")

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  paymentMethod     PaymentMethod?    @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId   String?           @map("payment_method_id")
  paymentMethodType PaymentMethodType @map("payment_method_type")

  paidAt DateTime? @map("paid_at")
  sendAt DateTime? @map("send_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiredAt DateTime @map("expired_at")
}

enum PaidStatus {
  PENDING
  PAID
  CANCELLED
  EXPIRED

  @@map("paid_status")
}

enum OrderStatus {
  PENDING
  PROCESS
  SUCCESS
  FAILED
  CANCELLED

  @@map("order_status")
}

enum RefundStatus {
  NONE
  PENDING
  PROCESS
  SUCCESS
  FAILED

  @@map("refund_status")
}
