// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id       String @id @unique @default(uuid())
  username String @unique
  email    String @unique
  password String
  phone    String @unique
  longName String @map("long_name")

  role Role @default(USER)

  isBanned     Boolean @default(false) @map("is_banned")
  isVerifEmail Boolean @default(false) @map("is_verif_email")
  isVerifPhone Boolean @default(false) @map("is_verif_phone")

  otpCode String? @map("otp_code")
  pinCode String? @map("pin_code")

  balance Int @default(0)
  point   Int @default(0)

  verifiedAt      DateTime?
  createdAt       DateTime          @default(now())
  Transactions    Transactions[]
  BalanceMutation BalanceMutation[]
  Deposit         Deposit[]
  loginHistory    LoginHistory[]

  @@map("users")
}

model LoginHistory {
  id        String @id @unique @default(uuid())
  deviceId  String @unique @map("device_id")
  userAgent String @map("user_agent")
  ip        String @map("ip")

  token     String  @unique
  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id])
  isDeleted Boolean @default(false) @map("is_deleted")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  expiredAt DateTime @map("expired_at")

  @@map("login_history")
}

enum Role {
  ADMIN
  USER
  RESELLER

  @@map("role")
}

model Services {
  id        String      @id @unique @default(uuid())
  name      String      @unique
  slug      String      @unique
  desc      String?
  imgLogo   String?     @map("img_logo")
  imgBanner String?     @map("img_banner")
  type      ServiceType @default(LAINNYA) @map("service_type")
  publisher String?     @map("publisher")

  isAvailable Boolean @default(true) @map("is_available")

  inputFieldDescription String? @map("input_field_description")
  inputFieldHintImage   String? @map("input_field_hint_image")

  isInputFieldOne     Boolean        @default(false) @map("is_input_field_one")
  inputFieldOneLabel  String?        @map("input_field_one_label")
  inputFieldOneType   InputFieldType @default(TEXT) @map("input_field_one_type")
  inputFieldOneOption Json?          @map("input_field_one_option")

  isInputFieldTwo     Boolean        @default(false) @map("is_input_field_two")
  inputFieldTwoLabel  String?        @map("input_field_two_label")
  inputFieldTwoType   InputFieldType @default(TEXT) @map("input_field_two_type")
  inputFieldTwoOption Json?          @map("input_field_two_option")

  isInputFieldThree     Boolean        @default(false) @map("is_input_field_three")
  inputFieldThreeLabel  String?        @map("input_field_three_label")
  inputFieldThreeType   InputFieldType @default(TEXT) @map("input_field_three_type")
  inputFieldThreeOption Json?          @map("input_field_three_option")

  region       Region         @default(GLOBAL)
  productGroup ProductGroup[]

  metaName String? @map("meta_name")
  metaDesc String? @map("meta_desc")
  metaTags String? @map("meta_tags")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ServiceGroup ServiceGroup[]

  @@map("services")
}

model ServiceGroup {
  id      String  @id @unique @default(uuid())
  name    String  @unique
  desc    String?
  imgLogo String? @map("img_logo")

  orderNo Int @default(autoincrement()) @map("order_no")

  services Services[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("service_group")
}

enum ServiceType {
  GAME_DIRECT
  GAME_VOUCHER
  TAGIHAN
  PULSA
  PAKET_DATA
  E_MONEY
  AKUN_PREMIUM
  SMM
  LAINNYA

  @@map("service_type")
}

enum InputFieldType {
  TEXT
  NUMBER
  SELECT

  @@map("input_field_type")
}

model ProductGroup {
  id      String  @id @unique @default(uuid())
  subName String? @unique @map("sub_name")
  name    String
  desc    String?
  imgLogo String? @map("img_logo")

  region Region @default(GLOBAL)

  products   Products[]
  Services   Services?  @relation(fields: [servicesId], references: [id])
  servicesId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_group")
}

model Products {
  id                      String              @id @unique @default(uuid())
  sku_code                String              @unique @default(cuid()) @map("sku_code")
  name                    String
  desc                    String?
  imgLogo                 String?             @map("img_logo")
  profit                  Int                 @default(0)
  profitInPercent         Int                 @default(0) @map("profit_in_percent")
  price                   Int
  stock                   Int                 @default(100)
  resellerPrice           Int                 @map("reseller_price")
  profitReseller          Int                 @default(0) @map("profit_reseller")
  profitResellerInPercent Int                 @default(0) @map("profit_reseller_in_percent")
  type                    ServiceType         @default(LAINNYA) @map("type")
  typeResponse            ProductResponseType @default(DIRECT) @map("type_response")

  isAvailable Boolean @default(true)

  h2hProvider       ProviderH2H? @map("h2h_provider")
  idProductProvider String       @map("id_product_provider")
  priceFromProvider Int          @map("price_from_provider")

  productGroup   ProductGroup? @relation(fields: [productGroupId], references: [id])
  productGroupId String?

  cutOffStart String @default("00:00") @map("cut_off_start")
  cutOffEnd   String @default("00:00") @map("cut_off_end")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

enum ProductResponseType {
  DIRECT
  DiRECT_RETURN
  MANUAL
}

enum Region {
  INDONESIA
  MALAYSIA
  SINGAPORE
  GLOBAL

  @@map("region")
}

enum ProviderH2H {
  DIGIFLAZZ
  VIPRESELLER
  VOCAGAMES
  APIGAMES

  @@map("provider_h2h")
}

model PaymentMethod {
  id            String                @id @unique @default(cuid())
  providerId    String                @map("provider_id")
  provider      PaymentMethodProvider @map("provider")
  type          PaymentMethodType     @map("type")
  isLinkPayment Boolean               @default(false) @map("is_link_payment")

  name  String  @unique
  desc  String?
  image String? @map("image")

  fees          Int    @default(0)
  feesInPercent String @default("0") @map("fees_in_percent")
  minAmount     Int    @default(0) @map("min_amount")
  maxAmount     Int    @default(0) @map("max_amount")

  isAvailable      Boolean @default(true) @map("is_available")
  expiredInMinutes Int?    @default(30) @map("expired_in_minutes")

  cutOffStart String @default("00:00") @map("cut_off_start")
  cutOffEnd   String @default("00:00") @map("cut_off_end")

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Transactions Transactions[]
  Deposit      Deposit[]

  paymentAllowAccess PaymentAllowAccess[] @default([DEPOSIT, TRANSACTION]) @map("payment_allow_access")

  @@map("payment_method")
}

enum PaymentAllowAccess {
  DEPOSIT
  TRANSACTION
}

enum PaymentMethodType {
  SALDO
  TRANSFER_BANK
  TRANSFER_PULSA
  TRANSFER_EWALLET
  DIRECT_EWALLET
  VIRTUAL_ACCOUNT
  RETAIL_OUTLET
  CREDIT_CARD
  LINK_PAYMENT
  QR_CODE
  OTHER

  @@map("payment_method_type")
}

enum PaymentMethodProvider {
  SALDO
  PAYDISINI
  DUITKU
  TOKOPAY
  FLIP
}

model Transactions {
  id       String  @id @unique @default(uuid())
  orderRef String? @unique @map("order_ref")

  productId      String @map("product_id")
  productName    String @map("product_name")
  productService String @map("product_service")
  productPrice   Int    @map("product_price")
  productQty     Int    @default(1) @map("product_qty")
  price          Int    @map("price")
  fees           Int    @default(0)
  profit         Int    @default(0)
  totalPrice     Int    @map("total_price")

  paymentRef        String? @map("payment_ref")
  idPaymentProvider String? @map("id_payment_provider")
  paymentNumber     String? @map("payment_number")
  paymentName       String? @map("payment_name")
  linkPayment       String? @map("link_payment")

  isQrcode Boolean @default(false) @map("is_qrcode")
  qrData   String? @map("qr_data")

  paidStatus  PaidStatus  @default(PENDING) @map("paid_status")
  orderStatus OrderStatus @default(PENDING) @map("order_status")

  isRefunded   Boolean      @default(false) @map("is_refund")
  refundStatus RefundStatus @default(NONE) @map("refund_status")

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  paymentMethod     PaymentMethod?    @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId   String?           @map("payment_method_id")
  paymentMethodType PaymentMethodType @map("payment_method_type")

  paidAt DateTime? @map("paid_at")
  sendAt DateTime? @map("send_at")

  sourceIp    String?    @map("source")
  sourceAgent String?    @map("source_agent")
  sourceType  sourceType @default(WEB) @map("source_type")

  snRef      String? @map("sn_ref")
  notes      String? @map("notes")
  inputData  String? @map("input_data")
  outputData String? @map("output_data")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiredAt DateTime @map("expired_at")

  @@map("transactions")
}

enum sourceType {
  WEB
  MOBILE
  API

  @@map("source_type")
}

enum PaidStatus {
  PENDING
  PAID
  CANCELLED
  EXPIRED

  @@map("paid_status")
}

enum OrderStatus {
  PENDING
  PROCESS
  SUCCESS
  FAILED
  CANCELLED

  @@map("order_status")
}

enum RefundStatus {
  NONE
  PENDING
  PROCESS
  SUCCESS
  FAILED

  @@map("refund_status")
}

model BannerSlider {
  id      String  @id @unique @default(cuid())
  name    String  @unique
  img     String
  link    String?
  orderNo Int     @default(autoincrement()) @map("order_no")

  isAvailable Boolean @default(true) @map("is_available")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("banner_slider")
}

model BalanceMutation {
  id         String       @id @unique @default(cuid()) @map("id")
  name       String       @map("name")
  type       MutationType @map("type")
  amount     Int          @map("amount")
  oldBalance Int          @map("old_balance")
  newBalance Int          @map("new_balance")

  refType BalanceRefType @map("ref_type")
  refId   String?        @map("ref_id")

  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  notes     String?  @map("notes")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("balance_mutation")
}

enum MutationType {
  IN
  OUT
}

enum BalanceRefType {
  DEPOSIT
  WITHDRAW
  TRANSACTION
  REFUND
  TRANSFER

  @@map("balance_ref_type")
}

model Deposit {
  id String @id @unique @default(uuid())

  paymentRef        String? @map("payment_ref")
  idPaymentProvider String? @map("id_payment_provider")
  paymentNumber     String? @map("payment_number")
  paymentName       String? @map("payment_name")
  isLinkPayment     Boolean @default(false) @map("is_link_payment")
  linkPayment       String? @map("link_payment")

  isQrcode Boolean @default(false) @map("is_qrcode")
  qrData   String? @map("qr_data")

  depositStatus DepositStatus @default(PENDING) @map("deposit_status")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  paymentMethod     PaymentMethod?    @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId   String?           @map("payment_method_id")
  paymentMethodType PaymentMethodType @map("payment_method_type")

  sourceIp    String?    @map("source")
  sourceAgent String?    @map("source_agent")
  sourceType  sourceType @default(WEB) @map("source_type")

  notes String? @map("notes")

  amount Int @map("amount")
  fees   Int @default(0)
  total  Int @default(0)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiredAt DateTime @map("expired_at")
}

enum DepositStatus {
  PENDING
  PROCESS
  SUCCESS
  CANCELLED
  EXPIRED

  @@map("deposit_status")
}
